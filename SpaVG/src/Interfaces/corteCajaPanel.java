
package Interfaces;

import Controlador.BD.Conexion;
import java.math.BigDecimal;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.sql.PreparedStatement;
import java.sql.Connection;
import java.sql.Statement;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.HashSet;
import java.util.Set;

/**
 *
 * @author brand
 */
public class corteCajaPanel extends javax.swing.JPanel {

    private registrosPanel registrosPanel;
    ArrayList<Integer> idProductos;
    Conexion con = new Conexion();
    Connection cn;
    Statement st;
    ResultSet rs;

    public corteCajaPanel() {
        initComponents();
        cn = con.getConnection();
        registrosPanel = new registrosPanel();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        panelVentas = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        btnBuscar = new javax.swing.JButton();
        btnEliminarFila = new javax.swing.JButton();
        btnLimpiarTabla = new javax.swing.JButton();
        btnMenos = new javax.swing.JButton();
        btnMas = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaVentas = new javax.swing.JTable();
        txtTotal = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtPagarcon = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtCambio = new javax.swing.JTextField();
        btnPagar = new javax.swing.JButton();
        txtCodigo = new javax.swing.JTextField();
        btnBuscar1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        setPreferredSize(new java.awt.Dimension(1090, 690));

        jPanel1.setBackground(new java.awt.Color(0, 0, 153));

        panelVentas.setBackground(new java.awt.Color(255, 255, 255));

        jLabel11.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(0, 0, 0));
        jLabel11.setText("Corte");

        btnBuscar.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnBuscar.setText("Agregar paquete");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });
        btnBuscar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnBuscarKeyPressed(evt);
            }
        });

        btnEliminarFila.setText("Delete");
        btnEliminarFila.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarFilaActionPerformed(evt);
            }
        });

        btnLimpiarTabla.setText("Delete All");
        btnLimpiarTabla.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarTablaActionPerformed(evt);
            }
        });

        btnMenos.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        btnMenos.setText("-");
        btnMenos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMenosActionPerformed(evt);
            }
        });

        btnMas.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        btnMas.setText("+");
        btnMas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMasActionPerformed(evt);
            }
        });

        tablaVentas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Código", "Nombre", "Cantidad", "Precio Venta", "Importe", "Fecha Inicio", "Fecha Final"
            }
        ));
        tablaVentas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaVentasMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tablaVentas);

        txtTotal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTotalActionPerformed(evt);
            }
        });

        jLabel1.setBackground(new java.awt.Color(0, 0, 0));
        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 0));
        jLabel1.setText("Total:");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 0, 0));
        jLabel4.setText("Pagar con:");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 0, 0));
        jLabel5.setText("$");

        txtPagarcon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPagarconActionPerformed(evt);
            }
        });
        txtPagarcon.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtPagarconKeyPressed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(0, 0, 0));
        jLabel6.setText("$");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 0, 0));
        jLabel3.setText("Cambio:");

        txtCambio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCambioActionPerformed(evt);
            }
        });

        btnPagar.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        btnPagar.setText("Pagar");
        btnPagar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPagarActionPerformed(evt);
            }
        });

        txtCodigo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCodigoActionPerformed(evt);
            }
        });
        txtCodigo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtCodigoKeyPressed(evt);
            }
        });

        btnBuscar1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnBuscar1.setText("Buscar");
        btnBuscar1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscar1ActionPerformed(evt);
            }
        });
        btnBuscar1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnBuscar1KeyPressed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 0, 0));
        jLabel2.setText("Código");

        javax.swing.GroupLayout panelVentasLayout = new javax.swing.GroupLayout(panelVentas);
        panelVentas.setLayout(panelVentasLayout);
        panelVentasLayout.setHorizontalGroup(
            panelVentasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelVentasLayout.createSequentialGroup()
                .addGroup(panelVentasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(panelVentasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(panelVentasLayout.createSequentialGroup()
                            .addGap(14, 14, 14)
                            .addComponent(jLabel11))
                        .addGroup(panelVentasLayout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1062, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(panelVentasLayout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnBuscar1, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(93, 93, 93)
                        .addComponent(btnBuscar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnEliminarFila, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnLimpiarTabla)
                        .addGap(64, 64, 64)
                        .addComponent(btnMenos, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnMas, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(panelVentasLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtPagarcon, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(65, 65, 65)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtCambio, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnPagar, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(49, 49, 49))
        );
        panelVentasLayout.setVerticalGroup(
            panelVentasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelVentasLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel11)
                .addGroup(panelVentasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelVentasLayout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addGroup(panelVentasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE, false)
                            .addComponent(btnLimpiarTabla, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnMas)
                            .addComponent(btnMenos)
                            .addComponent(btnEliminarFila, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(panelVentasLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(panelVentasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnBuscar1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)
                            .addComponent(btnBuscar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 403, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(72, 72, 72)
                .addGroup(panelVentasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(txtPagarcon, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(panelVentasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel3)
                        .addComponent(txtCambio, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnPagar, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelVentasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(panelVentasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jLabel1)))
                .addContainerGap(9, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelVentas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(57, 57, 57))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelVentas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(22, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents


    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed

    }//GEN-LAST:event_btnBuscarActionPerformed

    private void btnBuscarKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnBuscarKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnBuscarKeyPressed

    private void btnEliminarFilaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarFilaActionPerformed
        // Obtener el índice de la fila seleccionada
    int selectedRow = tablaVentas.getSelectedRow();
    
    // Verificar si hay alguna fila seleccionada
    if (selectedRow != -1) {
        // Eliminar la fila seleccionada de la tabla
        DefaultTableModel model = (DefaultTableModel) tablaVentas.getModel();
        model.removeRow(selectedRow);
        
        // Calcular y actualizar el total
        actualizarTotal();
    } else {
        JOptionPane.showMessageDialog(null, "Seleccione una fila para eliminar.", "Advertencia", JOptionPane.WARNING_MESSAGE);
    }
    }//GEN-LAST:event_btnEliminarFilaActionPerformed

    private void btnLimpiarTablaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarTablaActionPerformed
        // Obtener el modelo de la tabla
    DefaultTableModel model = (DefaultTableModel) tablaVentas.getModel();
    
    // Vaciar la tabla
    model.setRowCount(0);
    
    // Reiniciar el total
    txtTotal.setText("0");
    }//GEN-LAST:event_btnLimpiarTablaActionPerformed

    private void btnMenosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMenosActionPerformed
        // Obtener la fila seleccionada
    int filaSeleccionada = tablaVentas.getSelectedRow();

    // Verificar si se seleccionó una fila
    if (filaSeleccionada >= 0) {
        // Obtener el modelo de la tabla
        DefaultTableModel model = (DefaultTableModel) tablaVentas.getModel();

        // Obtener el valor de la cantidad en la fila seleccionada
        BigDecimal cantidad = (BigDecimal) model.getValueAt(filaSeleccionada, 2);

        // Verificar si la cantidad es mayor que 1 para evitar números negativos
        if (cantidad.compareTo(BigDecimal.ONE) > 0) {
            // Decrementar la cantidad
            cantidad = cantidad.subtract(BigDecimal.ONE);

            // Establecer la nueva cantidad en la tabla
            model.setValueAt(cantidad, filaSeleccionada, 2);

            // Obtener el precio de venta de la fila seleccionada
            BigDecimal precioVenta = (BigDecimal) model.getValueAt(filaSeleccionada, 3);

            // Calcular el nuevo importe
            BigDecimal importe = precioVenta.multiply(cantidad);

            // Establecer el nuevo importe en la tabla
            model.setValueAt(importe, filaSeleccionada, 4);

            // Calcular el total de la compra y mostrarlo
            actualizarTotal();
        } else {
            JOptionPane.showMessageDialog(null, "La cantidad no puede ser menor que 1.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    } else {
        JOptionPane.showMessageDialog(null, "Seleccione un producto de la tabla.", "Error", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_btnMenosActionPerformed

    private void btnMasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMasActionPerformed
        // Obtener la fila seleccionada
    int filaSeleccionada = tablaVentas.getSelectedRow();

    // Verificar si se seleccionó una fila
    if (filaSeleccionada >= 0) {
        // Obtener el modelo de la tabla
        DefaultTableModel model = (DefaultTableModel) tablaVentas.getModel();

        // Obtener el valor de la cantidad en la fila seleccionada
        BigDecimal cantidad = (BigDecimal) model.getValueAt(filaSeleccionada, 2);

        // Incrementar la cantidad
        cantidad = cantidad.add(BigDecimal.ONE);

        // Establecer la nueva cantidad en la tabla
        model.setValueAt(cantidad, filaSeleccionada, 2);

        // Obtener el precio de venta de la fila seleccionada
        BigDecimal precioVenta = (BigDecimal) model.getValueAt(filaSeleccionada, 3);

        // Calcular el nuevo importe
        BigDecimal importe = precioVenta.multiply(cantidad);

        // Establecer el nuevo importe en la tabla
        model.setValueAt(importe, filaSeleccionada, 4);

        // Calcular el total de la compra y mostrarlo
        actualizarTotal();
    } else {
        JOptionPane.showMessageDialog(null, "Seleccione un producto de la tabla.", "Error", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_btnMasActionPerformed

    private void tablaVentasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaVentasMouseClicked

    }//GEN-LAST:event_tablaVentasMouseClicked

    private void txtTotalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTotalActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTotalActionPerformed

    private void txtPagarconActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPagarconActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPagarconActionPerformed

    private void txtPagarconKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPagarconKeyPressed

    }//GEN-LAST:event_txtPagarconKeyPressed

    private void txtCambioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCambioActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCambioActionPerformed

    private void btnPagarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPagarActionPerformed
        // Obtener el total de la compra desde el campo txtTotal
    BigDecimal totalCompra = new BigDecimal(txtTotal.getText());

    // Obtener la cantidad ingresada por el usuario desde el campo txtPagarcon
    BigDecimal montoPagado = new BigDecimal(txtPagarcon.getText());

    // Calcular el cambio
    BigDecimal cambio = montoPagado.subtract(totalCompra);

    // Verificar si el monto pagado es suficiente
    if (montoPagado.compareTo(totalCompra) < 0) {
        JOptionPane.showMessageDialog(null, "Monto insuficiente. Por favor, ingrese un monto válido.", "Advertencia", JOptionPane.WARNING_MESSAGE);
        return; // Salir del método si el monto pagado es insuficiente
    }

    // Mostrar el cambio en el campo txtCambio
    txtCambio.setText(cambio.toString());

    // Actualizar la cantidad de productos en la tabla y en la base de datos
    DefaultTableModel model = (DefaultTableModel) tablaVentas.getModel();
    int rowCount = model.getRowCount();
    for (int i = 0; i < rowCount; i++) {
        int idProducto = (int) model.getValueAt(i, 0); // Obtener el ID del producto
        BigDecimal cantidadVendida = new BigDecimal(model.getValueAt(i, 2).toString()); // Obtener la cantidad vendida
        actualizarCantidadProducto(idProducto, cantidadVendida); // Actualizar la cantidad del producto en la base de datos
    }

    // Obtener la conexión a la base de datos
    Connection con = cn; // Suponiendo que 'cn' es tu conexión a la base de datos

    // Obtener el fondo inicial
    double fondoInicial = registrosPanel.obtenerFondoInicial();

    // Calcular las ganancias del día
    double gananciasDelDia = registrosPanel.obtenerGananciasDelDia(con); // Usar el método de RegistrosVenta

    // Calcular el total
    double total = fondoInicial + gananciasDelDia;

    // Registrar el corte diario
    boolean corteRegistrado = registrosPanel.registrarCorteDiario(con, LocalDate.now(), fondoInicial, gananciasDelDia, total); // Usar el método de RegistrosVenta

    if (corteRegistrado) {
        // Actualizar los TextFields en registrosPanel
        registrosPanel.txtFechaGanancia.setText(LocalDate.now().format(DateTimeFormatter.ofPattern("dd-MM-yyyy")));
        registrosPanel.txtFondoActual.setText(String.valueOf(fondoInicial));
        registrosPanel.txtGananciasDia.setText(String.valueOf(gananciasDelDia));
        registrosPanel.txtTotalDia.setText(String.valueOf(total));

        JOptionPane.showMessageDialog(null, "Compra realizada!.", "Confirmación", JOptionPane.INFORMATION_MESSAGE);
    } else {
        JOptionPane.showMessageDialog(null, "Error al registrar el corte diario.", "Error", JOptionPane.ERROR_MESSAGE);
    }

    // Limpiar la tabla y el campo txtTotal después de pagar
    model.setRowCount(0);
    txtTotal.setText("");
    limpiarCampos(); // Implementa este método para limpiar otros campos si es necesario
    }//GEN-LAST:event_btnPagarActionPerformed

    private void txtCodigoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCodigoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCodigoActionPerformed

    private void txtCodigoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCodigoKeyPressed

    }//GEN-LAST:event_txtCodigoKeyPressed

    private void btnBuscar1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscar1ActionPerformed
        // Obtener el ID del producto a buscar desde el campo de texto
        String idProducto = txtCodigo.getText();

        // Verificar si se proporcionó un ID válido
        if (!idProducto.isEmpty()) {
            // Convertir el ID a entero
            try {
                int id = Integer.parseInt(idProducto);
                // Llamar al método para realizar la búsqueda por ID
                buscarProductoPorId(id);
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Ingrese un ID de producto válido.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Ingrese un ID de producto.", "Advertencia", JOptionPane.WARNING_MESSAGE);
        }
        actualizarTotal();
    }//GEN-LAST:event_btnBuscar1ActionPerformed

    private void btnBuscar1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnBuscar1KeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnBuscar1KeyPressed

    private void actualizarTotal() {
    BigDecimal total = BigDecimal.ZERO; // Inicializar el total como cero
    
    // Recorrer todas las filas de la tabla
    for (int i = 0; i < tablaVentas.getRowCount(); i++) {
        BigDecimal importe = (BigDecimal) tablaVentas.getValueAt(i, 4); // Obtener el importe de la fila i
        total = total.add(importe); // Sumar el importe al total
    }
    
    // Mostrar el total en el textField
    txtTotal.setText(total.toString());
}
    Set<Integer> productosAgregados = new HashSet<>();
    //METODOS DE LOS COMPONENTES----------------------------------------------------------------------------------------------------------
    public void buscarProductoPorId(int idProducto) {
        try {
        // Verificar si el producto ya ha sido agregado
        if (productosAgregados.contains(idProducto)) {
            JOptionPane.showMessageDialog(null, "Este producto ya ha sido agregado.", "Advertencia", JOptionPane.WARNING_MESSAGE);
            return; // Salir del método si el producto ya ha sido agregado
        }

        // Construir la consulta SQL para seleccionar el producto por su ID
        String sql = "SELECT id, nombre, precio_venta FROM productos WHERE id = ?";
        PreparedStatement pst = cn.prepareStatement(sql);
        pst.setInt(1, idProducto);

        // Ejecutar la consulta
        ResultSet rs = pst.executeQuery();

        // Verificar si se encontró algún producto con el ID especificado
        if (rs.next()) {
            // Obtener los resultados de la consulta
            int id = rs.getInt("id");
            String nombre = rs.getString("nombre");
            BigDecimal precioVenta = new BigDecimal(rs.getInt("precio_venta"));
            BigDecimal cantidad = BigDecimal.ONE; // Establecer la cantidad inicial en 1
            BigDecimal importe = precioVenta; // El importe inicial es igual al precioVenta

            // Agregar los resultados a la tabla
            DefaultTableModel model = (DefaultTableModel) tablaVentas.getModel();
            model.addRow(new Object[]{id, nombre, cantidad, precioVenta, importe}); // Agregar importe a la tabla

            // Agregar el ID del producto al conjunto de productos agregados
            productosAgregados.add(id);

            // Calcular el total de la compra y mostrarlo
            actualizarTotal();
        } else {
            JOptionPane.showMessageDialog(null, "No se encontró ningún producto con el ID especificado.", "Advertencia", JOptionPane.WARNING_MESSAGE);
        }
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null, "Error al buscar producto por ID: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
    }
    
    private void limpiarCampos() {
    // Limpiar el campo de búsqueda
    txtCodigo.setText("");
    
    // Limpiar el campo de pagar con
    txtPagarcon.setText("");
    
    // Limpiar el campo de cambio
    txtCambio.setText("");
    
    // Limpiar la tabla de productos
    DefaultTableModel model = (DefaultTableModel) tablaVentas.getModel();
    model.setRowCount(0);
    
    // Limpiar el campo de total
    txtTotal.setText("");
}
    
    private void actualizarCantidadProducto(int idProducto, BigDecimal cantidadVendida) {
    try {
        // Construir la consulta SQL para actualizar la cantidad del producto en la base de datos
        String sql = "UPDATE inventario SET cantidad = cantidad - ? WHERE id_producto = ?";
        PreparedStatement pst = cn.prepareStatement(sql);
        pst.setBigDecimal(1, cantidadVendida);
        pst.setInt(2, idProducto);
        
        // Ejecutar la actualización
        int filasActualizadas = pst.executeUpdate();
        
        if (filasActualizadas > 0) {
            System.out.println("Cantidad del producto actualizada correctamente en la base de datos.");
        } else {
            System.out.println("Error al actualizar la cantidad del producto en la base de datos.");
        }
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null, "Error al actualizar la cantidad del producto en la base de datos: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
    
    
}




    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnBuscar1;
    private javax.swing.JButton btnEliminarFila;
    private javax.swing.JButton btnLimpiarTabla;
    private javax.swing.JButton btnMas;
    private javax.swing.JButton btnMenos;
    private javax.swing.JButton btnPagar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel panelVentas;
    private javax.swing.JTable tablaVentas;
    private javax.swing.JTextField txtCambio;
    private javax.swing.JTextField txtCodigo;
    private javax.swing.JTextField txtPagarcon;
    private javax.swing.JTextField txtTotal;
    // End of variables declaration//GEN-END:variables
}
